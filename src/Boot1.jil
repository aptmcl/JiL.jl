#lang:jil

;;If you change this file, you need to force recompilation of the JiL package

(macro cond clauses
  (if (null? clauses)
    'false
    (let ((clause (car clauses))
          (rest (cdr clauses)))
      (if (eq? (car clause) 'else)
        (cons 'begin (cdr clause))
        (list 'if (car clause)
              (cons 'begin (cdr clause))
              (cons 'cond rest))))))

(def (expand_quasiquote x)
  (if (eq? 'quasiquote (car x))
      (optimize-quasiquote (qq-expand (cadr x) 0))
      x))

(def (equal?? s1 s2)
  (or (eq? s1 '?)
      (eq? s1 s2)
      (and (pair? s1)
           (pair? s2)
           (equal?? (car s1) (car s2))
           (equal?? (cdr s1) (cdr s2)))))

(def (optimize-quasiquote expr)
  (if (equal?? '(quote ?) expr)
    (list 'quote (optimize-quasiquote (cadr expr)))
    (if (equal?? '(append ? (quote ())) expr) ;;(append ... (quote ())) -> ...
      (optimize-quasiquote (cadr expr))
      (if (equal?? '(append (list ?) ?) expr) ;;(append (list b) ...) -> (cons b ...)
        (list 'cons (cadadr expr) (optimize-quasiquote (caddr expr)))
        (if (equal?? '(append (quote (?)) ?) expr) ;;(append (quote (b)) ...) -> (cons (quote b) ...)
          (list 'cons (list 'quote (caar (cdadr expr))) (optimize-quasiquote (caddr expr)))
          expr)))))

(def (qq-expand x depth)
  (if (pair? x)
    (cond ((eq? (car x) 'quasiquote)
           (list 'cons (list 'quote (car x)) (qq-expand (cdr x) (+ depth 1))))
          ((or (eq? (car x) 'unquote)
               (eq? (car x) 'unquote-splicing))
           (cond ((> depth 0)
                  (list 'cons (list 'quote (car x)) (qq-expand (cdr x) (- depth 1))))
                 ((and (eq? 'unquote (car x))
                       (not (null? (cdr x)))
                       (null? (cddr x)))
                  (cadr x))
                 (else 
                  (error "Illegal"))))
          (else
           (list 'append 
                 (qq-expand-list (car x) depth)
                 (qq-expand (cdr x) depth))))
    (if (vector? x)
      (list 'list->vector (qq-expand (vector->list x) depth))
      (list 'quote x))))

(def (qq-expand-list x depth)
  (if (pair? x)
    (cond ((eq? (car x) 'quasiquote)
           (list 'list (list 'cons (list 'quote (car x)) (qq-expand (cdr x) (+ depth 1)))))
          ((or (eq? (car x) 'unquote)
               (eq? (car x) 'unquote-splicing))
           (cond ((> depth 0)
                  (list 'list (list 'cons (list 'quote (car x)) (qq-expand (cdr x) (- depth 1)))))
                 ((eq? 'unquote (car x))
                  (cons 'list (cdr x)))
                 (else
                  (cons 'append (cdr x)))))
          (else
           (list 'list 
                 (list 'append
                       (qq-expand-list (car x) depth)
                       (qq-expand (cdr x) depth)))))
    (list 'quote (list x))))