#lang:jil

;;If you change this file, you need to force recompilation of the JiL package

;;(def (expand_quasiquote exp)
;;  (begin
;;    (def (splicing? form)
;;      (and (pair? form)
;;           (or (and (pair? (car form))
;;                    (eq? (caar form) 'unquote-splicing))
;;               (splicing? (cdr form)))))
;;    (def (proper-quasiquote-list? lst)
;;      (or (null? lst)
;;          (and (pair? lst)
;;               (not (eq? (car lst) 'unquote))
;;               (proper-quasiquote-list? (cdr lst)))))
;;    (def (non-proper-quasiquote-map f lst)
;;      (if (pair? lst)
;;        (if (eq? (car lst) 'unquote)
;;          (f (cadr lst))
;;          (cons (f (car lst))
;;                (non-proper-quasiquote-map f (cdr lst))))
;;        lst))
;;    (def (expand-list form)
;;      (if (proper-quasiquote-list? form)
;;        (if (splicing? form)
;;            (cons 'append
;;                  (map (lambda (x)
;;                         (if (and (pair? x)
;;                                  (eq? (car x) 'unquote-splicing))
;;                             (list 'convert 'List (cadr x))
;;                             (list 'list (expand x))))
;;                       form))
;;            (cons 'list (map expand form)))
;;        (cons 'list* (non-proper-quasiquote-map expand form))))
;;    (def (expand form)
;;      (if (not (pair? form))
;;        (list 'quote form)
;;        (if (eq? 'unquote (car form))
;;          (cadr form)
;;          (if (eq? (car form) 'quasiquote)
;;            (expand (cadr form))
;;            (expand-list form)))))
;;    (expand (cadr exp))))

(def (equal?? s1 s2)
  (or (eq? s1 '?)
      (eq? s1 s2)
      (and (pair? s1)
           (pair? s2)
           (equal?? (car s1) (car s2))
           (equal?? (cdr s1) (cdr s2)))))


(def (expand_quasiquote exp)
  (begin
    (def (backquote? expr)
      (and (pair? expr) (eq? (car expr) 'quasiquote)))
    (def (comma? expr) 
      (and (pair? expr) (eq? (car expr) 'unquote)))
    (def (comma-at? expr)
      (and (pair? expr) (eq? (car expr) 'unquote-splicing)))
    (def (data expr)
      (cadr expr))
    (def (expand form)
      (if (comma? form)
        (data form)
        (if (comma-at? form)
          (error "Illegal!")
          (if (backquote? form)
            (expand (expand (data form)))
            (if (pair? form)
              (list 'append 
                (expand-list (car form))
                (expand (cdr form)))
              (list 'quote form))))))
    (def (expand-list form)
      (if (comma? form)
        (list 'list (data form))
        (if (comma-at? form)
          (data form)
          (if (backquote? form)
            (expand-list (expand (data form)))
            (if (pair? form)
              (list 'list
                    (list 'append
                          (expand-list (car form))
                          (expand (cdr form))))
              (list 'quote (list form)))))))
    (def (optimize expr)
      (if (equal?? '(quote ?) expr)
        (list 'quote (optimize (cadr expr)))
        (if (equal?? '(append ? (quote ())) expr) ;;(append ... (quote ()))
          (optimize (cadr expr)) 
          (if (equal?? '(append (list ?) ?) expr) ;;(append (list b) ... -> (cons b ...)
            (list 'cons (cadadr expr) (optimize (caddr expr)))
            (if (equal?? '(append (quote (?)) ?) expr) ;;(append (quote (b)) ... -> (cons (quote b) ...)
              (list 'cons (list 'quote (caar (cdadr expr))) (optimize (caddr expr)))
              expr)))))
    (if (backquote? exp)
      (optimize (expand (data exp)))
      exp)))

